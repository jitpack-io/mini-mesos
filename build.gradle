import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage

version = '0.1.0-SNAPSHOT'

ext {
    imagePrefix = 'containersol'
    imageName = imagePrefix + '/minimesos'
}

buildscript {

    repositories {
        maven {
            url "http://dl.bintray.com/gesellix/gradle-plugins"
        }
        maven {
            url "https://jitpack.io"
        }
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath "com.bmuschko:gradle-docker-plugin:2.4.1"
        classpath "com.github.zafarkhaja:java-semver:0.9.0"
        classpath "de.gesellix:gradle-debian-plugin:16"
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-remote-api'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
version = rootProject.version.toString()

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

//group = "org.apache.mesos.mini"

dependencies {
    compile 'com.github.docker-java:docker-java:4f094c112'
    compile 'junit:junit:4.11'
    compile 'com.jayway.awaitility:awaitility:1.6.3'
    compile 'com.mashape.unirest:unirest-java:1.4.5'

    compile 'org.slf4j:jcl-over-slf4j:1.7.12'
    compile 'org.slf4j:log4j-over-slf4j:1.7.12'
    compile 'org.slf4j:jul-to-slf4j:1.7.12'

    compile 'org.slf4j:slf4j-api:1.7.12'

    compile 'ch.qos.logback:logback-core:1.1.3'
    compile 'ch.qos.logback:logback-classic:1.1.3'
}

mainClassName = "org.apache.mesos.mini.main.Main"

jar {
    baseName = "minimesos"
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest {
        attributes(
                'Main-Class'                : mainClassName,
                'Implementation-Version'    : project.version
        )
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

task copyJar(type: Copy) {
    dependsOn 'jar'
    rename { String fileName ->
        fileName.replace("-${project.version}", "")
    }
    from        "build/libs/minimesos-${project.version}.jar"
    into        'build/libs'
}

afterEvaluate { project ->
    if (new File(project.projectDir, 'Dockerfile').exists()) {
        if (!project.hasProperty('imageName')) {
            throw new GradleException('Root directory of ' + project.name
                    + ' contains Dockerfile, but it does not define project.ext.imageName value')
        }
        docker.url = 'unix:///var/run/docker.sock'
        if(!System.properties['os.name'].equals('Mac OS X')) {
            docker.certPath = null
        }
        if (System.env.DOCKER_HOST) {
            docker.url = "$System.env.DOCKER_HOST".replace("tcp","https")
            if (System.env.DOCKER_CERT_PATH) {
                docker.certPath = new File(System.env.DOCKER_CERT_PATH)
            }
        }
        task buildDockerImage(type: DockerBuildImage, description: 'build Docker image') {
            inputDir = file(project.projectDir)
            tag = project.imageName
        }
        project.build.dependsOn buildDockerImage
        [ 'snapshot', 'version' ].each { aTag ->
            String uppercasedName = aTag.capitalize()
            task "tagDockerImageWith$uppercasedName"(type: DockerTagImage, description: 'tag Docker image') {
                imageId = project.imageName
                tag = ( 'version'.equals(aTag) ) ? project.version : aTag
                repository = project.imageName
                force = true
            }
            task "publishDockerImageWith$uppercasedName"(type: DockerPushImage, dependsOn: ["tagDockerImageWith$uppercasedName"],
                    description: 'publish Docker image') {
                imageName = project.imageName
                tag = ( 'version'.equals(aTag) ) ? project.version : aTag
                doFirst {
                    ['dockerHubUsername', 'dockerHubPassword', 'dockerHubEmail'].each {
                        assert project.hasProperty(it) : 'Undefined "' + it + '" property'
                    }
                    docker {
                        registryCredentials {
                            username = project.property('dockerHubUsername')
                            password = project.property('dockerHubPassword')
                            email = project.property('dockerHubEmail')
                        }
                    }
                }
            }
        }
    }
}

build.dependsOn copyJar
